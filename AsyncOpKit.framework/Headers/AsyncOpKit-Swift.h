// Generated by Apple Swift version 3.1 (swiftlang-802.0.53 clang-802.0.42)
#pragma clang diagnostic push

#if defined(__has_include) && __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <objc/NSObject.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if defined(__has_include) && __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus) || __cplusplus < 201103L
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if defined(__has_attribute) && __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if defined(__has_attribute) && __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if defined(__has_attribute) && __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if defined(__has_attribute) && __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if defined(__has_attribute) && __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if defined(__has_attribute) && __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if defined(__has_attribute) && __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name) enum _name : _type _name; enum SWIFT_ENUM_EXTRA _name : _type
# if defined(__has_feature) && __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) SWIFT_ENUM(_type, _name)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if defined(__has_feature) && __has_feature(modules)
@import ObjectiveC;
@import Foundation;
@import Dispatch;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"

/// AsyncClosureObjectProtocol defines the interface for the object passed into AsyncClosures by AsyncClosuresOperations
SWIFT_PROTOCOL("_TtP10AsyncOpKit26AsyncClosureObjectProtocol_")
@protocol AsyncClosureObjectProtocol <NSObject>
/// Set a value on the AsyncClosuresOperation to pass among closures
@property (nonatomic, strong) id _Nullable value;
/// Check if the operation is cancelled
@property (nonatomic, readonly) BOOL isOperationCancelled;
/// Mark the closure finished
- (void)finishClosure;
/// Cancel the operation
- (void)cancelOperation;
@end

@class NSError;

/// AsyncOperation takes care of the boilerplate you need for writing asynchronous NSOperations and adds a couple of useful features: An optional results handler that includes the operation, and properties to store results of the operation.
SWIFT_CLASS("_TtC10AsyncOpKit14AsyncOperation")
@interface AsyncOperation : NSOperation
/// The completionHandler is fired once when the operation finishes on the queue specified by <code>completionHandlerQueue</code>. It passes in the finished operation which will indicate whethere the operation was cancelled, had an error, or has a value.
/// :finishedOp: The finished operation. Downcast if needed inside the compleetion handler.
@property (nonatomic, copy) void (^ _Nullable completionHandler)(AsyncOperation * _Nonnull);
/// The operation queue on which the results handler will fire. Default is mainQueue.
@property (nonatomic, strong) dispatch_queue_t _Nonnull completionHandlerQueue;
/// Override main to start potentially asynchronous work. When the operation is complete, you must call finish(). Do not call super.
/// This method will not be called it the operation was cancelled before it was started.
- (void)main;
@property (nonatomic, strong) id _Nullable value;
@property (nonatomic, strong) NSError * _Nullable error;
@property (nonatomic, readonly, getter=isAsynchronous) BOOL asynchronous;
- (void)start;
@property (nonatomic, readonly, getter=isExecuting) BOOL executing;
@property (nonatomic, readonly, getter=isFinished) BOOL finished;
- (void)finish;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

enum AsyncClosuresQueueKind : NSInteger;

/// AsyncClosuresOperation manages a queue of AsyncClosure closures.
SWIFT_CLASS("_TtC10AsyncOpKit22AsyncClosuresOperation")
@interface AsyncClosuresOperation : AsyncOperation
/// :queueKind: Whether the closures should execute on the mainQueue or a background queue.
///
/// returns:
/// A new AsyncClosuresOperation
- (nonnull instancetype)init;
- (nonnull instancetype)initWithQueueKind:(enum AsyncClosuresQueueKind)queueKind;
- (nonnull instancetype)initWithQueueKind:(enum AsyncClosuresQueueKind)queueKind qualityOfService:(NSQualityOfService)qualityOfService OBJC_DESIGNATED_INITIALIZER;
/// Create a new AsyncClosuresOperation with a closure
/// <ol>
///   <li>
///     Because the queue is performed serially, closures must be marked finished. (See addAsyncClosure).
///   </li>
///   <li>
///     Once started, an AsyncClosuresOperation will not finish until all its closures have been marked as finished, even if it has been cancelled. It is the programmerâ€™s responsibility to check for cancellation.
///   </li>
///   <li>
///     If an AsyncClosuresOperation is cancelled before it is started, its AsyncClosures will not be called.
///   </li>
///   <li>
///     For executing closures concurrently, use a concurrent operation queue with multiple AsyncClosuresOperations. You can add dependencies.
///   </li>
/// </ol>
/// :queueKind: Whether the closures should execute on the mainQueue or a background queue.
/// :asyncClosure: The AsyncClosure.
/// :see: addAsyncClosure.
- (nonnull instancetype)initWithQueueKind:(enum AsyncClosuresQueueKind)queueKind asyncClosure:(void (^ _Nonnull)(id <AsyncClosureObjectProtocol> _Nonnull))asyncClosure;
+ (AsyncClosuresOperation * _Nonnull)asyncClosuresOperation:(enum AsyncClosuresQueueKind)queueKind asyncClosure:(void (^ _Nonnull)(id <AsyncClosureObjectProtocol> _Nonnull))asyncClosure SWIFT_WARN_UNUSED_RESULT;
/// Adds a new AsyncClosure to the AsyncClosuresOperation. Has no effect if the operation has begun executing or has already finished or been cancelled.
/// Usage:
/// closuresOp.addAsyncClosure {
/// closureController in
/// if closureController.isOperationCancelled {
/// closureController.finishClosure()
/// return
/// }
/// dispatch_async(dispatch_get_global_queue(QOS_CLASS_BACKGROUND, 0)) {
/// // do some async stuff and then finish
/// closureController.finishClosure()
/// }
/// }
/// \param asyncClosure The AsyncClosure to add. For the operation to proceed to
/// the next closure or to finish, you must use asyncClosureâ€™s closureController
/// parameter mark it as finished.
/// :see: AsyncClosureObjectProtocol
///
- (void)addAsyncClosure:(void (^ _Nonnull)(id <AsyncClosureObjectProtocol> _Nonnull))asyncClosure;
- (void)main;
@end

/// The kind of serial operation queue the AsyncClosuresOperation should manage.
typedef SWIFT_ENUM(NSInteger, AsyncClosuresQueueKind) {
/// Use a mainQueue operation queue
  AsyncClosuresQueueKindMain = 0,
/// Create a background queue
  AsyncClosuresQueueKindBackground = 1,
};



@interface NSOperationQueue (SWIFT_EXTENSION(AsyncOpKit))
@end

#pragma clang diagnostic pop
